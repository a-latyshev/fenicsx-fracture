# The Docker image that will be used to build your app
image:
   name: ghcr.io/fenics/dolfinx/lab:v0.6.0-r1
   entrypoint: [""]
# Functions that should be executed before the build script is run

variables: 
    HDF5_MPI: "ON"
    HDF5_DIR: "/usr/local/"
    DEB_PYTHON_INSTALL_LAYOUT: deb_system
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip" 
    PYVISTA_OFF_SCREEN: "false"
    PYVISTA_JUPYTER_BACKEND: "static"
    PUBLISH_DIR: "./_build/html"
    DEB_PYTHON_INSTALL_LAYOUT: "deb_system"

stages:
#    - lint
    - pages
    - test
    
before_script:
  - apt-get update && apt-get install -y libgl1-mesa-glx libxrender1 xvfb
  - python3 -m pip install -U pip
  #- python3 -m pip install --no-binary=h5py git+https://github.com/h5py/h5py@master
  - python3 -m pip install -r requirements.txt


pages:
  script:
    - jupyter-book build notebooks
    - mv notebooks/_build/html/ public/
  artifacts:
    paths:
      # The folder that contains the files to be exposed at the Page URL
      - public
  rules:
    # This ensures that only pushes to the default branch will trigger
    # a pages deploy
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

.test_template:
    stage: test
    variables: 
      PYVISTA_OFF_SCREEN: "True"
    rules:
        - if: ($CI_PIPELINE_SOURCE == "merge_request_event")
        - if: ($CI_PIPELINE_SOURCE == "schedule")

test/linear-elasticity:
  stage: test
  script:
    - cd notebooks/linear-elasticity
    - jupyter-nbconvert *.ipynb --to python
    - python3 00-Mesh.py
    - python3 01-LinearElasticity.py
    - python3 02-LEFM.py

test/phase-field:
  stage: test
  script:
    - cd notebooks/phase-field
    - jupyter-nbconvert *.ipynb --to python
    - python3 phase-field.py

test/elastodynamics:
  stage: test
  script:
    - cd notebooks/elastodynamics
    - jupyter-nbconvert *.ipynb --to python
    - python3 01-Elastodynamics.py    
    - python3 01-Elastodynamics_explicit.py